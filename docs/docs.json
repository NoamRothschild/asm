{
    "common/": {
        "debug.asm": {
            "printChar": {
                "description": "prints given character to stdout encoded as ASCII",
                "params": ["[#] ASCII byte, zero-padded into 32-bit"],
                "return": []
            },
            "printMessage": {
                "description": "prints given C like string string to stdout encoded as ASCII (NULL terminated)",
                "params": ["[&] buffer pointer"],
                "return": []
            },
            "printTerminator": {
                "description": "prints an end of line character to stdout",
                "params": [],
                "return": []
            },
            "printBin": {
                "description": "prints given memory buffer bytes in binary format",
                "params": ["[#] amm of bytes to print", "[&] buffer pointer"],
                "return": []
            },
            "printHex": {
                "description": "prints given memory buffer bytes in hexadecimal format",
                "params": ["[#] amm of bytes to print", "[&] buffer pointer"],
                "return": []
            },
            "printInt": {
                "description": "prints given integer value in decimal format",
                "params": ["[#] a 32 bit value"],
                "return": []
            },
            "setDefaultColor": {
                "description": "sets stdout default color to given one",
                "params": ["[&] ANSI Color pointer"],
                "return": []
            },
            "resetDefaultColor": {
                "description": "resets stdout to default color",
                "params": [],
                "return": []
            },
            "printColored": {
                "description": "in given color, prints given C like string string to stdout encoded as ASCII (NULL terminated)",
                "params": ["[&] ANSI Color pointer", "[&] buffer pointer"],
                "return": []
            }
        },
        "general.asm": {
            "igetLength": {
                "description": "returns the length of a C like string (NULL terminated)",
                "params": ["[&] buffer pointer"],
                "return": ["[#] length of the string"]
            },
            "memcpy": {
                "description": "copies given amount of bytes from src buffer to dest buffer",
                "params": ["[&] dest buffer pointer", "[&] src buffer pointer", "[#] length of message"],
                "return": ["[&] end of message pointer"]
            },
            "memset": {
                "description": "sets all data in given range to given byte",
                "params": ["[&] dest buffer pointer", "[#] the byte, zero-padded into 32-bit", "[#] length of message"],
                "return": []
            },
            "exit": {
                "description": "exit with status code 0",
                "params": [],
                "return": []
            },
            "sreadInput": {
                "description": "reads up to 255 bytes from stdin into buffer",
                "params": ["[&] buffer pointer"],
                "return": []
            }
        },
        "threading.asm": {
            "fork": {
                "description": "creates a child process to the process ran by",
                "params": [],
                "return": ["[#] process type identifer (when 0 executor is child process, else parent)"]
            },
            "close_terminated": {
                "description": "closes terminated child processes since just calling exit is not enough",
                "params": [],
                "return": []
            }
        },
        "string.asm": {
            "strlen": {
                "description": "returns the length of a C like string (NULL terminated)",
                "params": ["[&] buffer pointer"],
                "return": ["[#] length of the string"]
            },
            "sprintf": {
                "description": "stores formatted print (%s) in given buffer. replaces each '%' with next param",
                "params": ["[&?] optional string buffer (as many as you want, reverse order)", "[&] string termplate buffer", "[&] dest buffer pointer"],
                "return": []
            },
            "toString": {
                "description": "takes the given 4 byte value and turn it into a string (base 10)",
                "params": ["[#] the value to be converted", "[&] buffer pointer"],
                "return": []
            },
            "strcmp": {
                "description": "checks if 2 strings are equal",
                "params": ["[&] string pointer 1", "[&] string pointer 2"],
                "return": ["[#] (0 ? 1) - (false ? true)"]
            }
        },
        "fileManager.asm": {
            "newFile": {
                "description": "creates a new file on disk with 777 perms given filename",
                "params": ["[&] filename pointer"],
                "return": ["[#] file descriptor"]
            },
            "writeFile": {
                "description": "creates a new file and stores given string inside it",
                "params": ["[&] filename pointer", "[&] string data buffer pointer"],
                "return": []
            },
            "openFile": {
                "description": "returns file descriptor given a path (or -1 if any error occur)",
                "params": ["[&] filename pointer"],
                "return": ["[#] file descriptor"]
            },
            "readFile": {
                "description": "stores file contents given a file descriptor, location to store in and number of bytes",
                "params": ["[#] file descriptor", "[&] dest buffer pointer", "[#] amm of bytes to read"],
                "return": []
            },
            "closeFile": {
                "description": "closes a file given a file descriptor",
                "params": ["[#] file descriptor"],
                "return": []
            },
            "deleteFile": {
                "description": "deletes a file given a file descriptor",
                "params": ["[&] filename pointer"],
                "return": []
            },
            "appendFile": {
                "description": "appends the given string to the end of the file",
                "params": ["[#] file descriptor", "[&] string data buffer pointer"],
                "return": []
            },
            "iLengthFile": {
                "description": "returns the length of a file, or -1 on error",
                "params": ["[&] filename pointer"],
                "return": ["[#] length of the file (in bytes)"]
            }
        }
    },
    "b64/": {
        "b64.asm": {
            "b64_encode": {
                "description": "encodes the given bytearray & stores into buffer",
                "params": ["[#] length of message", "[&] dest buffer pointer", "[&] src buffer pointer"],
                "return": []
            }
        }
    },
    "sha1/": {
        "sha1.asm": {
            "sha1": {
                "description": "hashes the given bytearray using sha-1",
                "params": ["[&] 20 byte dest buffer pointer", "[&] src bytearray pointer", "[#] amm of bytes to process"],
                "return": []
            },
            "addLen": {
                "description": "adds the given length in bytes to the end of the chunk",
                "params": ["[#] length of message (in bytes)"],
                "return": []
            },
            "function_f": {
                "description": "internal sha1 function that calculates f(t;B,C,D)",
                "params": ["[#] t", "[#] B", "[#] C", "[#] D"],
                "return": ["[#] calculated value"]
            },
            "constants_k": {
                "description": "internal sha1 function that returns K(t) const based on t",
                "params": ["[#] t"],
                "return": ["[#] calculated const value"]
            },
            "digest": {
                "description": "digests loaded chunk from before and returns the digest using last used h's values",
                "params": ["[&] 20 byte buffer pointer"],
                "return": []
            },
            "sha1_reset_h": {
                "description": "resets the h's values to the default ones",
                "params": ["[&] 20 byte dest buffer pointer"],
                "return": []
            }
        }
    },
    "sockets/": {
        "sockets.asm": {
            "createSocket": {
            "description": "creates a socket and returns its file descriptor",
            "params": [],
            "return": ["[#] a file descriptor for the socket"]
           },
           "bindSocket": {
            "description": "binds a socket to a port and a host",
            "params": ["[#] socket file descriptor"],
            "return": []
           },
           "listenSocket": {
            "description": "invokes listen on given socket with a max queue length of 10",
            "params": ["[#] socket file descriptor"],
            "return": []
           },
           "acceptSocket": {
            "description": "wait until a client has sent data to the socket",
            "params": ["[#] socket file descriptor"],
            "return": ["[#] connected socket file descriptor"]
           },
           "readSocket": {
            "description": "reads the given socket file descriptor and stores its data in buffer",
            "params": ["[#] amm of bytes to read", "[#] connected socket file descriptor", "[&] buffer pointer"],
            "return": []
           },
           "writeSocket": {
            "description": "writes to the given socket file descriptor the given buffer",
            "params": ["[#] amm of bytes to write", "[#] connected socket file descriptor", "[&] buffer pointer"],
            "return": []
           },
           "closeSocket": {
            "description": "closes the given socket via its file descriptor",
            "params": ["[#] socket file descriptor"],
            "return": []
           }
        }
    }
}